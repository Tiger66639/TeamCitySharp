{"name":"Teamcitysharp","tagline":"API for TeamCity","body":"#TeamCitySharp\r\n[![Build Status](https://travis-ci.org/Tiger66639/TeamCitySharp.svg)](https://travis-ci.org/Tiger66639/TeamCitySharp)\r\n*.NET Library to access TeamCity via their REST API.\r\n\r\nFor more information on TeamCity visit:\r\nhttp://www.jetbrains.com/teamcity\r\n\r\n##Releases\r\nPlease find the release notes [here](https://github.com/stack72/TeamCitySharp/releases)\r\n\r\n##License \r\nhttp://stack72.mit-license.org/\r\n\r\n##Installation\r\nThere are 2 ways to use TeamCitySharp:\r\n\r\n* install-package TeamCitysharp (via Nuget)\r\n* Download source and compile\r\n\r\n##Build Monitor\r\n* There is a sample build monitor built with TeamCitySharp. It can be found at [TeamCityMonitor](https://github.com/stack72/TeamCityMonitor)\r\n\r\n##Sample Usage\r\nTo get a list of projects\r\n\r\n    var client = new TeamCityClient(\"localhost:81\");\r\n    client.Connect(\"admin\", \"qwerty\");\r\n    var projects = client.Projects.All();\r\n\r\n\r\nTo get a list of running builds\r\n\r\n    var client = new TeamCityClient(\"localhost:81\");\r\n    client.Connect(\"admin\", \"qwerty\");\r\n    var builds = client.Builds.ByBuildLocator(BuildLocator.RunningBuilds());\r\n\r\n##Connecting to a server\r\n\r\nTo connect as an authenticated user:\r\n\r\n    var client = new TeamCityClient(\"localhost:81\");\r\n    client.Connect(\"username\", \"password\");\r\n\r\nTo connect as a Guest:\r\n\r\n    var client = new TeamCityClient(\"localhost:81\");\r\n    client.ConnectAsGuest();\r\n    \r\n##API Interaction Groups\r\nThere are many tasks that the TeamCity API can do for us. TeamCitySharp groups these tasks into specialist areas\r\n\r\n* Builds\r\n* Projects\r\n* BuildConfigs\r\n* ServerInformation\r\n* Users\r\n* Agents\r\n* VcsRoots\r\n* Changes\r\n* BuildArtifacts\r\n\r\nEach area has its own list of methods available\r\n\r\n###Builds\r\n    List<Build> SuccessfulBuildsByBuildConfigId(string buildConfigId);\r\n\tBuild LastSuccessfulBuildByBuildConfigId(string buildConfigId);\r\n\tList<Build> FailedBuildsByBuildConfigId(string buildConfigId);\r\n\tBuild LastFailedBuildByBuildConfigId(string buildConfigId);\r\n\tBuild LastBuildByBuildConfigId(string buildConfigId);\r\n\tList<Build> ErrorBuildsByBuildConfigId(string buildConfigId);\r\n\tBuild LastErrorBuildByBuildConfigId(string buildConfigId);\r\n\tList<Build> ByBuildConfigId(string buildConfigId);\r\n\tList<Build> ByConfigIdAndTag(string buildConfigId, string tag);\r\n\tList<Build> ByUserName(string userName);\r\n\tList<Build> ByBuildLocator(BuildLocator locator);\r\n\tList<Build> AllSinceDate(DateTime date);\r\n\tList<Build> AllBuildsOfStatusSinceDate(DateTime date, BuildStatus buildStatus);\r\n\tList<Build> NonSuccessfulBuildsForUser(string userName);\r\n\tBuild LastBuildByAgent(string agentName);\r\n\r\n###Projects\r\n\tList<Project> All();\r\n\tProject ByName(string projectLocatorName);\r\n\tProject ById(string projectLocatorId);\r\n\tProject Details(Project project);\r\n\tProject Create(string projectName);\r\n\tvoid Delete(string projectName);\r\n\tvoid DeleteProjectParameter(string projectName, string parameterName);\r\n\tvoid SetProjectParameter(string projectName, string settingName, string settingValue);\r\n\r\n###BuildConfigs\r\n\tList<BuildConfig> All();\r\n\tBuildConfig ByConfigurationName(string buildConfigName);\r\n\tBuildConfig ByConfigurationId(string buildConfigId);\r\n\tBuildConfig ByProjectNameAndConfigurationName(string projectName, string buildConfigName);\r\n\tBuildConfig ByProjectNameAndConfigurationId(string projectName, string buildConfigId);\r\n\tBuildConfig ByProjectIdAndConfigurationName(string projectId, string buildConfigName);\r\n\tBuildConfig ByProjectIdAndConfigurationId(string projectId, string buildConfigId);\r\n\tList<BuildConfig> ByProjectId(string projectId);\r\n\tList<BuildConfig> ByProjectName(string projectName);\r\n\tBuildConfig CreateConfiguration(string projectName, string configurationName);\r\n\r\n\tvoid SetConfigurationSetting(BuildTypeLocator locator, string settingName, string settingValue);\r\n\tvoid PostRawArtifactDependency(BuildTypeLocator locator, string rawXml);\r\n\tvoid PostRawBuildStep(BuildTypeLocator locator, string rawXml);\r\n\tvoid PostRawBuildTrigger(BuildTypeLocator locator, string rawXml);\r\n\tvoid SetConfigurationParameter(BuildTypeLocator locator, string key, string value);\r\n\tvoid PostRawAgentRequirement(BuildTypeLocator locator, string rawXml);\r\n\tvoid DeleteBuildStep(BuildTypeLocator locator, string buildStepId);\r\n\tvoid DeleteArtifactDependency(BuildTypeLocator locator, string artifactDependencyId);\r\n\tvoid DeleteAgentRequirement(BuildTypeLocator locator, string agentRequirementId);\r\n\tvoid DeleteParameter(BuildTypeLocator locator, string parameterName);\r\n\tvoid DeleteBuildTrigger(BuildTypeLocator locator, string buildTriggerId);\r\n\r\n\tvoid SetBuildTypeTemplate(BuildTypeLocator locatorBuildType, BuildTypeLocator locatorTemplate);\r\n\tvoid DeleteSnapshotDependency(BuildTypeLocator locator, string snapshotDependencyId);\r\n\tvoid PostRawSnapshotDependency(BuildTypeLocator locator, XmlElement rawXml);\r\n\tBuildConfig BuildType(BuildTypeLocator locator);\r\n\r\n    void DeleteConfiguration(BuildTypeLocator locator);\r\n    void DeleteAllBuildTypeParameters(BuildTypeLocator locator);\r\n    void PutAllBuildTypeParameters(BuildTypeLocator locator, IDictionary<string, string> parameters);\r\n    void DownloadConfiguration(BuildTypeLocator locator, Action<string> downloadHandler);\r\n\r\n###ServerInformation\r\n    Server ServerInfo();\r\n    List<Plugin> AllPlugins();\r\n    string TriggerServerInstanceBackup(BackupOptions backupOptions);\r\n\r\n###Users\r\n    List<User> All();\r\n    User Details(string userName);\r\n    List<Role> AllRolesByUserName(string userName);\r\n    List<Group> AllGroupsByUserName(string userName);\r\n    List<Group> AllUserGroups();\r\n    List<User> AllUsersByUserGroup(string userGroupName);\r\n    List<Role> AllUserRolesByUserGroup(string userGroupName);\r\n    bool Create(string username, string name, string email, string password);\r\n    bool AddPassword(string username, string password);\r\n\r\n###Agents\r\n    List<Agent> All();\r\n\r\n###VcsRoots\r\n    List<VcsRoot> All();\r\n    VcsRoot ById(string vcsRootId);\r\n    VcsRoot AttachVcsRoot(BuildTypeLocator locator, VcsRoot vcsRoot);\r\n    void DetachVcsRoot(BuildTypeLocator locator, string vcsRootId);\r\n    void SetVcsRootField(VcsRoot vcsRoot, VcsRootField field, object value);\r\n\r\n###Changes\r\n    List<Change> All();\r\n    Change ByChangeId(string id);\r\n    Change LastChangeDetailByBuildConfigId(string buildConfigId);\r\n    List<Change> ByBuildConfigId(string buildConfigId);\r\n\r\n###BuildArtifacts\r\n    void DownloadArtifactsByBuildId(string buildId, Action<string> downloadHandler);\r\n\r\n##Credits\r\n\r\nCopyright (c) 2013 Paul Stack (@stack72)\r\n\r\nThanks to the following contributors:\r\n\r\n* Barry Mooring (@codingbadger)\r\n* Simon Bartlett (@sibartlett)\r\n* Mike Larah (@MikeLarah)\r\n* Alexander Fast (@mizipzor)\r\n* Serge Baltic\r\n* Philipp Dolder\r\n* Mark deVilliers\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}